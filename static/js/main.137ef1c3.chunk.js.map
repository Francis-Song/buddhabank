{"version":3,"sources":["logo.png","components/App.js","reportWebVitals.js","index.js"],"names":["App","props","state","web3","account","buddhaToken","buddhaBank","balance","buddhaBankAddress","a","this","connectBlockchain","dispatch","startApp","provider","window","ethereum","console","error","detectEthereumProvider","log","Web3","eth","net","getId","networkId","getAccounts","accounts","getBalance","setState","alert","Contract","BuddhaBank","abi","networks","address","BuddhaToken","amount","methods","deposit","send","value","toString","from","e","preventDefault","withdraw","Navbar","style","backgroundColor","src","logo","width","height","className","alt","role","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","depositAmount","step","type","ref","input","placeholder","required","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.137ef1c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.78481860.png\";","import React, {Component} from \"react\";\nimport {Navbar, Tabs, Tab} from \"react-bootstrap\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from \"web3\"\n\nimport logo from '../logo.png';\nimport BuddhaBank from \"../build/BuddhaBank.json\";\nimport BuddhaToken from \"../build/BuddhaToken.json\";\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.connectBlockchain(this.props.dispatch)\n  }\n\n  async connectBlockchain(dispatch) {\n    const provider = await detectEthereumProvider();\n\n    if (provider) {\n      startApp(provider); \n    } else {\n      console.log('Please install MetaMask!');\n    }\n\n    function startApp(provider) {\n      if (provider !== window.ethereum) {\n        console.error('Do you have multiple wallets installed?');\n      }\n    }\n\n    const web3 = new Web3(window.ethereum);\n    const networkId = await web3.eth.net.getId();\n    const accounts = await web3.eth.getAccounts();\n\n    if(typeof accounts[0] !=='undefined'){\n      const balance = await web3.eth.getBalance(accounts[0])\n      this.setState({account: accounts[0], balance: balance, web3: web3})\n    } else {\n      window.alert('Please login with MetaMask')\n    }\n\n    const buddhaBank = new web3.eth.Contract(BuddhaBank.abi, BuddhaBank.networks[networkId].address);\n    const buddhaToken = new web3.eth.Contract(BuddhaToken.abi, BuddhaToken.networks[networkId].address);\n    const buddhaBankAddress = BuddhaBank.networks[networkId].address\n    this.setState({buddhaToken: buddhaToken, buddhaBank: buddhaBank, buddhaBankAddress: buddhaBankAddress})\n  }\n\n  async deposit(amount) {\n    await this.state.buddhaBank.methods.deposit().send({value: amount.toString(), from: this.state.account})\n  }\n\n  async withdraw(e) {\n    e.preventDefault()\n    \n    await this.state.buddhaBank.methods.withdraw().send({from: this.state.account})\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: 'undefined',\n      account: '',\n      buddhaToken: null,\n      buddhaBank: null,\n      balance: 0,\n      buddhaBankAddress: null\n    }\n  }\n\n  render() {\n    return (\n      <div>\n   <Navbar style={{backgroundColor: \"#FFEDB1\"}}>\n   <img\n        src={logo}\n        width=\"30\"\n        height=\"30\"\n        className=\"d-inline-block align-top\"\n        alt=\"Buddha Bank logo\"\n      />\n      Signed in as: {this.state.account}\n  </Navbar>\n      <br></br>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>Buddha Bank</h3>\n          <h5>Deposit Ether and Earn BuddhaToken (10% APY)</h5>\n          <p>*Ropsten Testnet Required</p>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n              <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"deposit\" title=\"Deposit\">\n                  <div>\n                  <br></br>\n                    Deposit Ether (min. 0.01)\n                    <form onSubmit={(e) => {\n                      e.preventDefault()\n                      let amount = this.depositAmount.value\n                      amount = amount * 10**18 //convert to wei\n                      this.deposit(amount)\n                    }}>\n                      <div className='form-group mr-sm-2'>\n                      <br></br>\n                        <input\n                          id='depositAmount'\n                          step=\"0.01\"\n                          type='number'\n                          ref={(input) => { this.depositAmount = input }}\n                          className=\"form-control form-control-md\"\n                          placeholder='amount...'\n                          required />\n                      </div>\n                      <button type='submit' className='btn btn-primary'>DEPOSIT</button>\n                    </form>\n\n                  </div>\n                </Tab>\n                <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n                  <br></br>\n                    Withdraw Ether + BuddhaToken?\n                    <br></br>\n                    <br></br>\n                  <div>\n                    <button type='submit' className='btn btn-primary' onClick={(e) => this.withdraw(e)}>WITHDRAW</button>\n                  </div>\n                </Tab> \n              </Tabs>\n              </div>\n            </main>\n          </div>\n        </header>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}